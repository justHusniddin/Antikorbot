import os
import json
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties


BOT_TOKEN = os.getenv('API_TOKEN')
ADMIN_CHAT_ID = os.getenv('ADMINS')
GROUP_ID = os.getenv('GROUP_ID', ADMIN_CHAT_ID)

ADMIN_IDS = [int(id.strip()) for id in os.getenv('ADMIN_IDS', '').split(',') if id.strip()]

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)

storage = MemoryStorage()
dp = Dispatcher(storage=storage)


class LocationManager:

    def __init__(self, json_path='data/locations.json'):
        self.json_path = json_path
        self.data = self._load_data()
        self.regions = self.data.get('regions', [])
        self.districts = self.data.get('districts', [])
        self.streets = self.data.get('quarters', [])

    def _load_data(self):
        try:
            with open(self.json_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            print(f"Warning: Location file {self.json_path} not found!")
            return {'regions': [], 'districts': [], 'streets': []}
        except json.JSONDecodeError as e:
            print(f"Error decoding JSON from {self.json_path}: {e}")
            return {'regions': [], 'districts': [], 'streets': []}

    def get_all_regions(self):
        return self.regions

    def get_region_by_id(self, region_id):
        for region in self.regions:
            if region['id'] == region_id:
                return region
        return None

    def get_districts_by_region(self, region_id):
        return [d for d in self.districts if d.get('region_id') == region_id]

    def get_district_by_id(self, district_id):
        for district in self.districts:
            if district['id'] == district_id:
                return district
        return None

    def get_streets_by_district(self, district_id):
        return [s for s in self.streets if s.get('district_id') == district_id]

    def get_street_by_id(self, street_id):
        for street in self.streets:
            if street['id'] == street_id:
                return street
        return None

    def get_full_address(self, region_id, district_id, street_id=None):
        parts = []

        region = self.get_region_by_id(region_id)
        if region:
            parts.append(region['name'])

        district = self.get_district_by_id(district_id)
        if district:
            parts.append(district['name'])

        if street_id:
            street = self.get_street_by_id(street_id)
            if street:
                parts.append(street['name'])

        return ', '.join(parts)


location_manager = LocationManager()


TEXTS = {
    'ru': {
        'welcome': (
            "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–Ω—Ç–∏–∫–æ—Ä –ë–æ—Ç!</b>\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É –Ω–∞ –∫–æ—Ä—Ä—É–ø—Ü–∏–æ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è. "
            "–í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ —É–ø–æ–ª–Ω–æ–º–æ—á–µ–Ω–Ω—ã–º–∏ –æ—Ä–≥–∞–Ω–∞–º–∏.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Tilni tanlang:"
        ),
        'language_selected': "‚úÖ –Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –†—É—Å—Å–∫–∏–π",
        'main_menu': "üìã <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        'submit_complaint': "üìù –ü–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É",
        'info': "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
        'change_language': "üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫",
        'anonymity_choice': (
            "üîí <b>–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å</b>\n\n"
            "–•–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É –∞–Ω–æ–Ω–∏–º–Ω–æ –∏–ª–∏ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö?"
        ),
        'with_data': "–° –º–æ–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ ‚úÖ",
        'anonymous': "–ê–Ω–æ–Ω–∏–º–Ω–æ üïµÔ∏è",
        'enter_full_name': "üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:",
        'enter_phone': "üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        'send_phone': "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üì±",
        'select_region': "üó∫ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:",
        'select_district': "üèò –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:",
        'select_mahalla': "üìç –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ö–∞–ª–ª—é:",
        'enter_target_name': "üë®‚Äçüíº –í–≤–µ–¥–∏—Ç–µ –§–ò–û –ª–∏—Ü–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–¥–∞–µ—Ç—Å—è –∂–∞–ª–æ–±–∞:",
        'enter_target_position': "üíº –í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å:",
        'enter_target_org': "üè¢ –í–≤–µ–¥–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é/—É—á—Ä–µ–∂–¥–µ–Ω–∏–µ:",
        'enter_complaint_text': (
            "üìù <b>–û–ø–∏—à–∏—Ç–µ —Å—É—Ç—å –∂–∞–ª–æ–±—ã</b>\n\n"
            "–£–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ:\n"
            "‚Ä¢ –ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ\n"
            "‚Ä¢ –ö–æ–≥–¥–∞ –ø—Ä–æ–∏–∑–æ—à–ª–æ\n"
            "‚Ä¢ –ö–∞–∫–∞—è —Å—É–º–º–∞ –∏–ª–∏ —É—Å–ª—É–≥–∞ —Ç—Ä–µ–±–æ–≤–∞–ª–∞—Å—å\n"
            "‚Ä¢ –î—Ä—É–≥–∏–µ –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏"
        ),
        'attach_media': (
            "üìé <b>–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤</b>\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã.\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."
        ),
        'finish_media': "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤ ‚úÖ",
        'skip': "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è≠",
        'confirmation': "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –∂–∞–ª–æ–±—ã:",
        'send': "–û—Ç–ø—Ä–∞–≤–∏—Ç—å ‚úÖ",
        'cancel': "–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå",
        'complaint_sent': "‚úÖ <b>–ñ–∞–ª–æ–±–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</b>\n\n–í–∞—à–∞ –∂–∞–ª–æ–±–∞ ‚Ññ{} –ø—Ä–∏–Ω—è—Ç–∞ –∏ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞.",
        'complaint_cancelled': "‚ùå –ü–æ–¥–∞—á–∞ –∂–∞–ª–æ–±—ã –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        'back': "‚óÄÔ∏è –ù–∞–∑–∞–¥",
        'invalid_phone': "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
        'error': "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
    },
    'uz': {
        'welcome': (
            "üëã <b>Antikorrupsiya Botga xush kelibsiz!</b>\n\n"
            "Bu yerda siz korrupsiya harakatlari haqida shikoyat qoldirishingiz mumkin. "
            "Sizning ma'lumotingiz vakolatli organlar tomonidan ko'rib chiqiladi.\n\n"
            "Tilni tanlang / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:"
        ),
        'language_selected': "‚úÖ Til o'rnatildi: O'zbekcha",
        'main_menu': "üìã <b>Asosiy menyu</b>\n\nAmalni tanlang:",
        'submit_complaint': "üìù Shikoyat yuborish",
        'info': "‚ÑπÔ∏è Ma'lumot",
        'change_language': "üåê Tilni o'zgartirish",
        'anonymity_choice': (
            "üîí <b>Maxfiylik</b>\n\n"
            "Shikoyatni anonim yoki ma'lumotlaringiz bilan yuborishni xohlaysizmi?"
        ),
        'with_data': "Mening ma'lumotlarim bilan ‚úÖ",
        'anonymous': "Anonim üïµÔ∏è",
        'enter_full_name': "üë§ F.I.Sh.ni kiriting:",
        'enter_phone': "üì± Telefon raqamingizni yuboring:",
        'send_phone': "Telefon raqamini yuborish üì±",
        'select_region': "üó∫ Viloyatni tanlang:",
        'select_district': "üèò Tumanni tanlang:",
        'select_mahalla': "üìç MFY ni tanlang:",
        'enter_target_name': "üë®‚Äçüíº Shikoyat qilinadigan shaxsning F.I.Sh.ni kiriting:",
        'enter_target_position': "üíº Lavozimni kiriting:",
        'enter_target_org': "üè¢ Tashkilot/muassasani kiriting:",
        'enter_complaint_text': (
            "üìù <b>Shikoyat mazmunini tasvirlab bering</b>\n\n"
            "Batafsil ko'rsating:\n"
            "‚Ä¢ Nima sodir bo'ldi\n"
            "‚Ä¢ Qachon sodir bo'ldi\n"
            "‚Ä¢ Qanday summa yoki xizmat talab qilindi\n"
            "‚Ä¢ Boshqa muhim tafsilotlar"
        ),
        'attach_media': (
            "üìé <b>Fayllarni biriktirish</b>\n\n"
            "Siz rasm, video yoki hujjatlarni biriktirishingiz mumkin.\n"
            "Fayllarni yuboring yoki tugmani bosing."
        ),
        'finish_media': "Fayllarni yuklashni tugatish ‚úÖ",
        'skip': "O'tkazib yuborish ‚è≠",
        'confirmation': "‚úÖ Shikoyatni yuborishni tasdiqlang:",
        'send': "Yuborish ‚úÖ",
        'cancel': "Bekor qilish ‚ùå",
        'complaint_sent': "‚úÖ <b>Shikoyat muvaffaqiyatli yuborildi!</b>\n\nSizning {} raqamli shikoyatingiz qabul qilindi va ko'rib chiqiladi.",
        'complaint_cancelled': "‚ùå Shikoyat yuborish bekor qilindi.",
        'back': "‚óÄÔ∏è Orqaga",
        'invalid_phone': "‚ùå Telefon raqami formati noto'g'ri. Qaytadan urinib ko'ring.",
        'error': "‚ùå Xatolik yuz berdi. Keyinroq urinib ko'ring.",
    }
}

def get_text(lang, key):
    return TEXTS.get(lang, TEXTS['ru']).get(key, TEXTS['ru'].get(key, ''))
