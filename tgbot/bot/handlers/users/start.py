from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from asgiref.sync import sync_to_async

from tgbot.models import TelegramUser
from tgbot.bot.keyboards.reply import language_keyboard, main_menu_keyboard
from tgbot.bot.loader import get_text

router = Router()


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    """Handle /start command"""

    # Clear any previous state
    await state.clear()

    # Get or create user in database
    user, created = await sync_to_async(TelegramUser.objects.get_or_create)(
        telegram_id=message.from_user.id,
        defaults={
            'username': message.from_user.username,
            'first_name': message.from_user.first_name,
            'last_name': message.from_user.last_name,
            # 'language': 'ru'  # Default language
        }
    )

    # If user exists, update info
    if not created:
        user.username = message.from_user.username
        user.first_name = message.from_user.first_name
        user.last_name = message.from_user.last_name
        await sync_to_async(user.save)()

    # Get user's language
    lang = user.language

    # If no language set, show language selection
    if not lang:
        welcome_text = "Welcome! Please select your language üëá\nXush kelibsiz! Tilni tanlang üëá"
        await message.answer(
            welcome_text,
            reply_markup=language_keyboard()
        )
    else:
        # Show welcome with selected language
        welcome_text = get_text(lang, 'welcome')
        menu_text = get_text(lang, 'main_menu')

        await message.answer(welcome_text)
        await message.answer(
            menu_text,
            reply_markup=main_menu_keyboard(lang)
        )


@router.message(F.text.in_(["–†—É—Å—Å–∫–∏–π üá∑üá∫", "O'zbekcha üá∫üáø"]))
async def select_language(message: Message, state: FSMContext):
    """Handle language selection"""

    # Determine selected language
    lang = 'ru' if message.text == "–†—É—Å—Å–∫–∏–π üá∑üá∫" else 'uz'

    # Update user language in database
    user = await sync_to_async(TelegramUser.objects.get)(
        telegram_id=message.from_user.id
    )
    user.language = lang
    await sync_to_async(user.save)()

    # Store language in FSM context
    await state.update_data(language=lang)

    # Confirmation message
    confirm_text = get_text(lang, 'language_selected')
    menu_text = get_text(lang, 'main_menu')

    await message.answer(confirm_text)
    await message.answer(
        menu_text,
        reply_markup=main_menu_keyboard(lang)
    )


@router.message(F.text.in_(["üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", "üåê Tilni o'zgartirish"]))
async def change_language(message: Message, state: FSMContext):
    """Handle language change request"""

    # Get current language
    user = await sync_to_async(TelegramUser.objects.get)(
        telegram_id=message.from_user.id
    )
    lang = user.language

    # Show language selection
    text = get_text(lang, 'welcome')
    await message.answer(
        text,
        reply_markup=language_keyboard()
    )


@router.message(F.text.in_(["‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "‚ÑπÔ∏è Ma'lumot"]))
async def show_info(message: Message):
    """Show bot information"""

    # Get user language
    user = await sync_to_async(TelegramUser.objects.get)(
        telegram_id=message.from_user.id
    )
    lang = user.language

    info_text = {
        'ru': (
            "‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ</b>\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø—Ä–∏–µ–º–∞ –∂–∞–ª–æ–± –Ω–∞ –∫–æ—Ä—Ä—É–ø—Ü–∏–æ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è.\n\n"
            "<b>–ö–∞–∫ –ø–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É:</b>\n"
            "1. –ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É¬ª\n"
            "2. –í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å\n"
            "3. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ\n"
            "4. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É\n\n"
            "<b>–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:</b>\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É –∞–Ω–æ–Ω–∏–º–Ω–æ. –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –≤–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ "
            "–Ω–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.\n\n"
            "<b>–ß—Ç–æ –±—É–¥–µ—Ç —Å –∂–∞–ª–æ–±–æ–π:</b>\n"
            "–í—Å–µ –∂–∞–ª–æ–±—ã –ø–æ—Å—Ç—É–ø–∞—é—Ç –≤ —É–ø–æ–ª–Ω–æ–º–æ—á–µ–Ω–Ω—ã–π –æ—Ä–≥–∞–Ω –∏ –±—É–¥—É—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω—ã –≤ "
            "—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–∫–æ–Ω–æ–º —Å—Ä–æ–∫–∏."
        ),
        'uz': (
            "‚ÑπÔ∏è <b>Bot haqida ma'lumot</b>\n\n"
            "Ushbu bot korrupsiya harakatlari bo'yicha shikoyatlarni qabul qilish uchun yaratilgan.\n\n"
            "<b>Shikoyat qanday yuboriladi:</b>\n"
            "1. ¬´Shikoyat yuborish¬ª tugmasini bosing\n"
            "2. Anonimlikni tanlang\n"
            "3. Barcha ma'lumotlarni to'ldiring\n"
            "4. Yuborishni tasdiqlang\n\n"
            "<b>Maxfiylik:</b>\n"
            "Siz shikoyatni anonim yuborishingiz mumkin. Bu holda sizning shaxsiy "
            "ma'lumotlaringiz saqlanmaydi.\n\n"
            "<b>Shikoyat bilan nima qilinadi:</b>\n"
            "Barcha shikoyatlar vakolatli organga yuboriladi va qonun bilan belgilangan "
            "muddatlarda ko'rib chiqiladi."
        )
    }

    await message.answer(
        info_text.get(lang, info_text['ru']),
        reply_markup=main_menu_keyboard(lang)
    )
